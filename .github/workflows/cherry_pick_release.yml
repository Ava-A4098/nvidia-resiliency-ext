name: Cherry Pick to Release

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: 'Branch to cherry-pick from'
        required: true
        default: 'main'
      release_branch:
        description: 'Target release branch'
        required: true
        default: 'release/v0.4.0'
      temp_branch:
        description: 'Temporary branch name for cherry-pick'
        required: true
        default: 'cherry-pick/staging'

permissions:
  contents: write
  pull-requests: write

jobs:
  cherry-pick:
    name: Cherry-pick PR commits into release
    runs-on: ubuntu-latest
    env:
      SKIP_COMMITS: |
        31c591585c030f6ad7a514f9ec0e9b90d7aa4019
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed to get full commit history
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Git
      run: |
        git config --global pull.rebase false
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Find commits to cherry-pick
      id: commits
      run: |
        echo "Fetching all branches..."
        git fetch origin

        echo "Collecting commits in ${{ github.event.inputs.base_branch }} not in ${{ github.event.inputs.release_branch }}..."
        COMMITS=$(git cherry origin/${{ github.event.inputs.release_branch }} origin/${{ github.event.inputs.base_branch }} | grep '^+' | awk '{print $2}')

        echo "Filtering commits that are part of PRs..."
        CHERRY_COMMITS=()
        for commit in $COMMITS; do
          PR_TITLE=$(gh pr list --search "$commit" --state merged --json title --jq '.[0].title' || true)
          if [[ ! -z "$PR_TITLE" ]]; then
            CHERRY_COMMITS+=("$commit")
          fi
        done

        echo "CHERRY_COMMITS<<EOF" >> $GITHUB_ENV
        for c in "${CHERRY_COMMITS[@]}"; do echo $c >> $GITHUB_ENV; done
        echo "EOF" >> $GITHUB_ENV

      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create temporary branch
      run: |
        git checkout -b ${{ github.event.inputs.temp_branch }} origin/${{ github.event.inputs.release_branch }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cherry-pick commits
      run: |
        for commit in $CHERRY_COMMITS; do
          if echo "$SKIP_COMMITS" | grep -q "$commit"; then
            echo "Skipping $commit (in skip list)"
            continue
          fi

          echo "Processing $commit..."
          PARENTS=$(git rev-list --parents -n 1 "$commit")
          NUM_PARENTS=$(echo "$PARENTS" | wc -w)
          if [ "$NUM_PARENTS" -gt 2 ]; then
            git cherry-pick -m 1 "$commit" || { echo "Conflict on $commit"; exit 1; }
          else
            git cherry-pick "$commit" || {
              # Conflict occurred, try to detect if it's an empty commit
              if git status | grep -q 'nothing to commit'; then
                echo "Empty cherry-pick after conflict resolution. Skipping..."
                git cherry-pick --skip
              else
                echo "Conflict on $commit";
                exit 1;
              fi
            }
          fi
        done
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Push cherry-picked branch
      run: |
        git push origin ${{ github.event.inputs.temp_branch }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create pull request to release branch
      run: |
        gh pr create \
          --base "${{ github.event.inputs.release_branch }}" \
          --head "${{ github.event.inputs.temp_branch }}" \
          --title "Cherry-pick PRs into ${{ github.event.inputs.release_branch }}" \
          --body "This PR includes cherry-picked commits from ${{ github.event.inputs.base_branch }} that went through PR review."

      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
